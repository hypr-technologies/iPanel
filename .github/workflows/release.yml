name: Release

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
      - 'hotfix/*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          npm install
          
      - name: Validate commit messages
        run: |
          npx commitlint --from=HEAD~10 --to=HEAD --verbose
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev
          
      - name: Install Python dependencies
        run: |
          pip install -r iPanel/requirements.txt
          pip install pytest flake8 black
          
      - name: Run tests
        run: |
          pytest iPanel/ -v
          
      - name: Lint code
        run: |
          flake8 iPanel/
          black --check iPanel/

  release:
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev
          
      - name: Install dependencies
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec
          pip install -r iPanel/requirements.txt
          pip install build wheel setuptools
          
      - name: Create scripts directory
        run: mkdir -p scripts
        
      - name: Create version update script
        run: |
          cat > scripts/update_version.py << 'EOF'
          #!/usr/bin/env python3
          import sys
          import re
          import os
          
          def update_version(new_version):
              # Update __init__.py
              init_file = 'iPanel/__init__.py'
              if os.path.exists(init_file):
                  with open(init_file, 'r') as f:
                      content = f.read()
                  
                  # Update version string
                  content = re.sub(
                      r'__version__\s*=\s*["\'][^"\']*["\']',
                      f'__version__ = "{new_version}"',
                      content
                  )
                  
                  with open(init_file, 'w') as f:
                      f.write(content)
              else:
                  with open(init_file, 'w') as f:
                      f.write(f'__version__ = "{new_version}"\n')
              
              # Update setup.py if it exists
              setup_file = 'setup.py'
              if os.path.exists(setup_file):
                  with open(setup_file, 'r') as f:
                      content = f.read()
                  
                  content = re.sub(
                      r'version\s*=\s*["\'][^"\']*["\']',
                      f'version="{new_version}"',
                      content
                  )
                  
                  with open(setup_file, 'w') as f:
                      f.write(content)
              
              # Update pyproject.toml if it exists
              pyproject_file = 'pyproject.toml'
              if os.path.exists(pyproject_file):
                  with open(pyproject_file, 'r') as f:
                      content = f.read()
                  
                  content = re.sub(
                      r'version\s*=\s*["\'][^"\']*["\']',
                      f'version = "{new_version}"',
                      content
                  )
                  
                  with open(pyproject_file, 'w') as f:
                      f.write(content)
              
              print(f"Updated version to {new_version}")
          
          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("Usage: python update_version.py <version>")
                  sys.exit(1)
              
              update_version(sys.argv[1])
          EOF
          
      - name: Create build script
        run: |
          cat > scripts/build_release.py << 'EOF'
          #!/usr/bin/env python3
          import sys
          import os
          import subprocess
          import shutil
          
          def build_release(version):
              print(f"Building release for version {version}")
              
              # Clean previous builds
              if os.path.exists('dist'):
                  shutil.rmtree('dist')
              if os.path.exists('build'):
                  shutil.rmtree('build')
              
              # Build Python package
              subprocess.run([sys.executable, '-m', 'build'], check=True)
              
              # Build Docker image
              docker_tag = f"ipanel:{version}"
              subprocess.run([
                  'docker', 'build', '-t', docker_tag, '.'
              ], check=True)
              
              # Export Docker image
              docker_file = f"docker/ipanel-{version}.tar"
              os.makedirs('docker', exist_ok=True)
              subprocess.run([
                  'docker', 'save', '-o', docker_file, docker_tag
              ], check=True)
              
              print(f"Release build completed for version {version}")
          
          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("Usage: python build_release.py <version>")
                  sys.exit(1)
              
              build_release(sys.argv[1])
          EOF
          
      - name: Make scripts executable
        run: chmod +x scripts/*.py
        
      - name: Configure Git
        run: |
          git config user.name "semantic-release-bot"
          git config user.email "semantic-release-bot@users.noreply.github.com"
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Run semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.version_type }}" != "auto" ]; then
            npx semantic-release --debug --dry-run=false --ci=false --branches='[{"name":"main"},{"name":"develop","prerelease":"alpha"},{"name":"release/*","prerelease":"beta"},{"name":"hotfix/*","prerelease":"hotfix"}]'
          else
            npx semantic-release --debug
          fi
          
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: release-artifacts
        path: |
          dist/
          docker/
            
  docker-release:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        
      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ipanel:latest
            ${{ secrets.DOCKER_USERNAME }}/ipanel:${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
